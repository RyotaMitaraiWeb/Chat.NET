import type { Meta, StoryObj } from '@storybook/react';
import Snackbar from './Snackbar';
import { SnackbarContextProvider, useSnackbar } from '@/hooks/useSnackbar/useSnackbar';

const meta: Meta<typeof Snackbar> = {
  title: 'Example/Snackbar',
  component: Snackbar,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    children: 'Hello',
    open: true,
  },
};

const SnackbarsDemo = () => {
  const snackbar = useSnackbar();
  return (
    <>
      <button
        onClick={() =>
          snackbar.success(
            {
              snackbarTitle: 'Snackbar #1',
              snackbarContent: 'This will close after five seconds',
              closeButtonText: 'Yay!',
            },
            5000,
          )
        }
      >
        Open success snackbar
      </button>
      <button
        onClick={() =>
          snackbar.info(
            {
              snackbarTitle: 'Snackbar #2',
              snackbarContent: 'This will close after ten seconds',
              closeButtonText: 'Okay',
            },
            10_000,
          )
        }
      >
        Open info snackbar
      </button>
      <button
        onClick={() =>
          snackbar.warning({
            snackbarTitle: 'Snackbar #3',
            snackbarContent: 'This will not autoclose. Press escape or the close button',
            closeButtonText: 'Close',
          })
        }
      >
        Open warning snackbar
      </button>
      <button
        onClick={() =>
          snackbar.error(
            `You can also provide a string, in which case the title and close button 
            text are autogenerated. This will autoclose in 20 seconds; open the success
            or info snackbar as soon as you open this one to see the timer restart.
            You can also open the success one, then immediately open this one to see the
            timer extend`,
            20_000,
          )
        }
      >
        Open error snackbar
      </button>
    </>
  );
};

export const WithUseSnackbar: Story = {
  render() {
    return (
      <SnackbarContextProvider>
        <SnackbarsDemo />
      </SnackbarContextProvider>
    );
  },
};
